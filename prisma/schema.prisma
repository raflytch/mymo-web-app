generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String?
  email     String   @unique
  password  String
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  habits      Habit[]
  entries     Entry[]
  reflections Reflection[]
  aiCoachLogs AiCoachLog[]
  otpCodes    OtpCode[]

  @@map("users")
}

model OtpCode {
  id        String   @id @default(cuid())
  userId    String
  email     String
  code      String
  type      String
  used      Boolean  @default(false)
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([email, code, type])
  @@map("otp_codes")
}

model Habit {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?
  color       String   @default("#3B82F6")
  frequency   String   @default("daily")
  targetCount Int      @default(1)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  entries Entry[]

  @@map("habits")
}

model Entry {
  id        String   @id @default(cuid())
  userId    String
  habitId   String
  date      DateTime @db.Date
  completed Boolean  @default(false)
  count     Int      @default(1)
  note      String?
  photoUrl  String?
  createdAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  habit Habit @relation(fields: [habitId], references: [id], onDelete: Cascade)

  @@unique([userId, habitId, date])
  @@map("entries")
}

model Reflection {
  id        String   @id @default(cuid())
  userId    String
  weekStart DateTime @db.Date
  prompt    String
  response  String?
  aiInsight String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, weekStart])
  @@map("reflections")
}

model AiCoachLog {
  id        String    @id @default(cuid())
  userId    String
  type      String
  message   String
  context   Json?
  sent      Boolean   @default(false)
  sentAt    DateTime?
  createdAt DateTime  @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("ai_coach_logs")
}
